#!/bin/bash

# Copyright (c) 2021 Seagate Technology LLC and/or its Affiliates
#
# This program is free software: you can redistribute it and/or modify it under the
# terms of the GNU Affero General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>. For any questions
# about this software or licensing, please email opensource@seagate.com or
# cortx-questions@seagate.com.

set -eu -o pipefail

log_file=/var/log/cortx-ha.log
BACKUP_SOURCE_DIR=/etc/cortx/ha
BACKUP_DEST_DIR=/opt/seagate/cortx/ha_conf_backup
consul=/usr/bin/consul
HARE_DIR=/var/lib/hare
pcs=/usr/sbin/pcs
crm_resource=/usr/sbin/crm_resource
crm_standby=/usr/sbin/crm_standby

exec &>> $log_file
exec &> >(stdbuf -oL gawk '{ print strftime("%Y-%m-%d %H:%M:%S"), $0 }')

log() {
    logger --stderr --tag pre_disruptive_upgrade "$*"
}

log "****************************************************************"
log "${0##*/}"
log "****************************************************************"

PROG=${0##*/}

usage() {
    cat <<EOF
Usage: $PROG

* The script expects existing Pacemaker cluster to be running.

Optional parameters:
    <-cb>         Take consul backup
EOF
}

backup_consul(){

    echo "Taking the backup of consul"
    log "${FUNCNAME[0]}: Exporting the Consul KV"

    consul_kv_dump=$HARE_DIR/consul-kv-dump.json
    if [[ -f $consul_kv_dump ]]; then
        # Facing one codacy issue with below line. Hence, compressing the file in a
        # different way
        #cat $consul_kv_dump | xz > ${consul_kv_dump%.json}-$(date '+%Y%m%d%H%M%S').json.xz

        # First remove the older dump
        rm -f *.json.tar.gz
        tar -czf ${consul_kv_dump%.json}-$(date '+%Y%m%d%H%M%S').json.tar.gz $consul_kv_dump
    fi
    $consul kv export > $consul_kv_dump
    [ $? != 0 ] && {
        log "${FUNCNAME[0]}: Consul KV export failed. Hence, exiting"
        exit 1
    }
    log "Consul Backup is taken successfully"
}

backup_conf(){

    echo "Taking the backup of ha conf directory"
    log "${FUNCNAME[0]}: Taking the backup of HA configuration"

    [ -d $BACKUP_DEST_DIR ]  && {
        rm -rf $BACKUP_DEST_DIR
    }

    mkdir -p $BACKUP_DEST_DIR

    # Take the backup of configuration files
    cp -r $BACKUP_SOURCE_DIR $BACKUP_DEST_DIR
    [ $? != 0 ] && {
        log "${FUNCNAME[0]}: Failed to create backup of HA config. Hence, exiting"
        exit 1
    }
    log "HA config backup is taken successfully"
}

cluster_standby_mode(){

    final_count=3
    standby_mode=$($crm_standby -G  | awk '{print $3}' | cut -d '=' -f 2)

    if [ "$standby_mode" == "on" ]
    then
        log "${FUNCNAME[0]}: Cluster is already in a standby mode"
    else
        # Keep cluster (nodes and resources) on standby mode
        $pcs node standby --all --wait=600
        [ $? == 0 ] || {
            retry_count=$(( $1 + 1 ))
            if [ $retry_count -le $final_count ];
            then
                log "${FUNCNAME[0]}: Some problem occured to keep the cluster in standby mode, Retrying.."
                cluster_standby_mode $retry_count
            else
                log "${FUNCNAME[0]}: Retry count exceeded for cluster standby mode. Hence, exiting.."
                exit 1
            fi
        }
    fi
}

delete_resources(){

    echo "Deleting the resources from the cluster"
    log "${FUNCNAME[0]}: Deleting the resources from the cluster"

    resources=$($pcs resource show)
    if [ "$resources" == "NO resources configured" ];
    then
        log "${FUNCNAME[0]}: No resources are configured. Hence, skipping this"
    else
	    prev_resource=""

        # Get only the name of the resource
        resource_list=$($crm_resource --list-raw)

        resource_list=( $resource_list )

        # Remove each one by one
        for resource in "${resource_list[@]}"
        do
            # In case of clone or master-slave resource, resource gets
            # displayed as rabbitmq:0, sspl:1 etc. So, remove :0 in such
            # case and perform delete operation only once.
            resource="${resource%:*}"

            # If same resource is in the list, that means it is already deleted.
            if [ "$prev_resource" != "$resource" ]; then
                log "${FUNCNAME[0]}: Deleting the resource: ${resource}"
                $pcs resource delete "${resource}" --force
            fi

            # For clone resources, in order to avoid repeatative delete,
            # it is required to store previous resource
            prev_resource=$resource
        done
    fi
}

while [ $# -gt 0 ]; do
    case $1 in
        -cb )
            backup_consul
            ;;
        -h )
            usage
            exit 0
            ;;
        * )
            ;;
    esac
    shift 1
done

backup_conf

retry_count=0
log "Putting the cluster in standby mode"
echo "Putting the cluster in standby mode"
cluster_standby_mode $retry_count

delete_resources
