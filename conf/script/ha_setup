#!/bin/bash

# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# This program is free software: you can redistribute it and/or modify it under the
# terms of the GNU Affero General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>. For any questions
# about this software or licensing, please email opensource@seagate.com or
# cortx-questions@seagate.com.

HA_PATH="<HA_PATH>"
SOURCE_HA_CONF="<HA_PATH>/conf/etc"
HA_CONF="/etc/cortx/ha"
LOGROTATE_CONF_DIR="/etc/logrotate.d"
HA_LOG="/var/log/seagate/cortx/ha"

LOCAL_NODE_MINION_ID=$(salt-call grains.get id --output=json | jq '.["local"]' | sed s/\"//g)
SYSTEM_CROSS_CONNECT_FILE="/opt/seagate/cortx/provisioner/generated_configs/$LOCAL_NODE_MINION_ID.cc"

HA_NON_CROSS_CONNECT_RULE_FILE='rules_engine_schema_without_crossconnect.json'
HA_CROSS_CONNECT_RULE_FILE='rules_engine_schema_with_crossconnect.json'
HA_CONF_RULE_FILE='rules_engine_schema.json'

# Add Log
mkdir -p "${HA_LOG}"/
exec &>> "${HA_LOG}"/${0##*/}.log
exec &> >(stdbuf -oL gawk '{ print strftime("%Y-%m-%d %H:%M:%S"), $0 }')

post_install() {
    echo "post_install"
    # TODO create ha user and ha group
    mkdir -p /var/log/seagate/cortx/ha/
    chown -R csm /var/log/seagate/cortx/ha/

    if [ ! -d "${LOGROTATE_CONF_DIR}" ]; then
        mkdir -p ${LOGROTATE_CONF_DIR}
    fi

    cp -rf ${HA_PATH}/conf/logrotate/cortx_ha_log.conf ${LOGROTATE_CONF_DIR}
}

config() {
    echo "config"

    mkdir -p ${HA_CONF}

    # TODO Add generation for rule engine to make rule engine schama
    cp -rf ${SOURCE_HA_CONF}/rules_engine_schema_jbod.json ${HA_CONF}/${HA_CONF_RULE_FILE}

    # ha conf
    cp -rf ${SOURCE_HA_CONF}/ha.conf ${HA_CONF}/

    # Configure database.json
    config_database

    # Decision Maker conf
    cp -rf ${SOURCE_HA_CONF}/decision_monitor_conf_vm.json ${HA_CONF}/decision_monitor_conf.json
}

init() {
    echo "init"
}

test() {
    echo "test"
}

reset() {
    echo "reset log"
    rm -rf ${HA_LOG}
    rm -rf ${LOGROTATE_CONF_DIR}/cortx_ha_log.conf
    rm -rf ${HA_CONF}
}

# Helping function

config_database() {
    # Config database.json
    cp -rf ${SOURCE_HA_CONF}/database.json ${HA_CONF}/database.json

    # Update consul vip
    CONSUL_HOST="localhost"

    sed -i -e "s|<CONSUL_HOST>|${CONSUL_HOST}|g" ${HA_CONF}/database.json
}

ACTION=$1
# Call action
$ACTION
