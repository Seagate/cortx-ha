{
    "csm": { 
    “<property>”: {},

    # Resource: 
    # Component resources e.g. csm_web, csm_agent, are described here 
    "csm-agent": { 
        # Parameters: (optional) 
        # List of resource parameters/values, if required. 
        # Example: "ip": "<ip address>" (in case of vip resource) 
        "parameters": {
                # "<key1>": "<value1>",
                # "<key2>": "<value2>"
            }, 

        # Group: 
        # Resource Group, e.g. "management", "io", "common", etc. 
        "group": "management_group", 

        # Provider: 
        # Resource provider which controls/monitors the resource 
        "provider": { 
            # Provider Name: 
            # Name of the provider which controls/monitors resource 
            # Examples: 
            # - "systemd:csm_agent" (csm agent is systemd service) 
            # - "ocf:sspl:sspl" (sspl is resource agent) 
            "name": "systemd", 

            # Service Name: 
            # Name of the service/process e.g. "csm_agent" related to the resource 
            "service": "csm_agent", 

            # Monitor Interval: 
            # Service control intervals for monitor. 
            # Example: 
            # "interval": "10s" 
            "intervals": [
                "0s",
                "30s",
                "0s"
            ],

            # Monitor Timeouts: 
            # Service timeouts for start, monitor, stop, resp. 
            # Beyond these timeouts, resource will go to fail state 
            # Example: 
            # "timeouts": [ "20s", "20s", "20s" ]
            "timeouts": [ "60s", "30s", "60s" ],

            # Counters 
            "counters": [ #        "<start_count>" ]
            }, 

        # Dependencies: 
        # Resource constraints, i.e. dependency, colocation, etc 
        # FIXME: not defined so far
        "dependencies": { 
            # Predecessors: 
            # List of related resources on which this resource depends on. 
            # Rules: 
            # 1. Dependent resources will start before this resource 
            # 2. If dependent resource fails, then this resource fails 
            # 3. Avoid cyclic dependency 
            # 4. Avoid dependency to a non-existent resource 
            # Example: 
            # "predecessors": [ "csm_web", "elasticsearch" ] 
            "predecessors": [
                    "<resource>",
                    "<resource>"
                ], 

            # Colocation: 
            # List of resources which are dependent and on same node 
            # all resource in colocation runs on the same node. 
            "colocation": [
                    "<resource>",
                    "<resource>"
                ], 

            # Relation: 
            # List of resource which are related to this resource but not 
            # dependent on it. It has Soft dependency where given resource 
            # will not fail if relation resource is failed. 
            "relation": [
                    "<resource>",
                    "<resource>"
                ]
            }, 

        # HA Related Attributes: 
        # List of attributes describing HA behavior 
        "ha": { 
            # Mode: 
            # HA failover mode. It can be one of the following: 
            # "active_passive", "active_active", "master_slave" 
            "mode": "active_passive", 

            # Clone Information: 
            # Required only for Active-Active and Master-Slave 
            "clones": { 
                # Active Count: 
                # Only if resource is active_active or master_slave 
                # Max no. of process/master instance running on node/cluster 
                # - max-clone-on-node: how many instances can be run on same node 
                # - total-clone: how many total instances can be run on the cluster 

                "active": [
                        "<max-clone-on-node>",
                        "<total-clone>"
                    ], 

                # Primary Count:  
                # Only if resource is master_slave 
                # Max no. of process/master instance running on node/cluster 
                # - max-clone-on-node: how many instances can be run on same node 
                # - total-clone: how many total instances can be run on the cluster 

                "primary": [
                        "<max-primary-on-node>",
                        "<total-primary>"
                    ], 

                # Parameters: 
                # Parameters to be used for clone instances, if any 

                "parameters": {
                        "<key1>": "<value1>",
                        "<key2>": "<value2>"
                    }
                }, 

            # Location: 
            # Location Affinity description, which includes list of nodes 
            # with priority (higher has more affinity) 
            # FIXME: not used currently
            "location": { 
                # It is score for node it can be any number like 1000 or INFINITY 
                # It is useful if resource want one node with high priority 
                # If both node want same priority then use INFINITY 
                # Example: 
                # "node1": "5000", 
                # "node2": "100" 
                "<hostname1>": "<priority1>",
                "<hostname2>": "<priority2>"
                }
            }
        },

    "csm-web": { 
        "parameters": {
                # "<key1>": "<value1>",
                # "<key2>": "<value2>"
            }, 

        "group": "management_group", 

        "provider": { 
            "name": "systemd",
            "service": "csm_web",
            "intervals": [ "0s", "30s", "0s" ],
            "timeouts": [ "60s", "30s", "60s" ],
            "counters": [ ]
            }, 

        # FIXME: not defined so far
        "dependencies": { 
            "predecessors": [
                    "<resource>",
                    "<resource>"
                ], 
            "colocation": [
                    "<resource>",
                    "<resource>"
                ], 
            "relation": [
                    "<resource>",
                    "<resource>"
                ]
            }, 

        "ha": { 
            "mode": "active_passive", 
            "clones": { 
                "active": [
                        "<max-clone-on-node>",
                        "<total-clone>"
                    ], 
                "primary": [
                        "<max-primary-on-node>",
                        "<total-primary>"
                    ], 
                "parameters": {
                        "<key1>": "<value1>",
                        "<key2>": "<value2>"
                    }
                }, 
            "location": { 
                "<hostname1>": "<priority1>",
                "<hostname2>": "<priority2>"
                }
            }
        },

    "kibana": { 
        "parameters": {
                # "<key1>": "<value1>",
                # "<key2>": "<value2>"
            }, 

        "group": "management_group", 

        "provider": { 
            "name": "systemd",
            "service": "kibana",
            "intervals": [ "0s", "30s", "0s" ],
            "timeouts": [ "60s", "30s", "60s" ],
            "counters": [ ]
            }, 

        # FIXME: not defined so far
        "dependencies": { 
            "predecessors": [
                    "<resource>",
                    "<resource>"
                ], 
            "colocation": [
                    "<resource>",
                    "<resource>"
                ], 
            "relation": [
                    "<resource>",
                    "<resource>"
                ]
            }, 

        "ha": { 
            "mode": "active_passive", 
            "clones": { 
                "active": [
                        "<max-clone-on-node>",
                        "<total-clone>"
                    ], 
                "primary": [
                        "<max-primary-on-node>",
                        "<total-primary>"
                    ], 
                "parameters": {
                        "<key1>": "<value1>",
                        "<key2>": "<value2>"
                    }
                }, 
            "location": { 
                "<hostname1>": "<priority1>",
                "<hostname2>": "<priority2>"
                }
            }
        }
    }
}