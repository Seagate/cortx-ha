#!/usr/bin/env bash

# Copyright (c) 2020 Seagate Technology LLC and/or its Affiliates
#
# This program is free software: you can redistribute it and/or modify it under the
# terms of the GNU Affero General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License along
# with this program. If not, see <https://www.gnu.org/licenses/>. For any questions
# about this software or licensing, please email opensource@seagate.com or
# cortx-questions@seagate.com.

set -eu -o pipefail
export PS4='+ [${BASH_SOURCE[0]##*/}:${LINENO}${FUNCNAME[0]:+:${FUNCNAME[0]}}] '
# set -x

### OCF resource agent.
###
### See the OCF Resource Agent Developer's Guide
### https://github.com/ClusterLabs/resource-agents/blob/master/doc/dev-guides/ra-dev-guide.asc

[[ -n ${OCF_ROOT:-} ]] || OCF_ROOT=/usr/lib/ocf
set +eu
. $OCF_ROOT/lib/heartbeat/ocf-shellfuncs
set -eu

HA_CHECKS_DIR=/opt/seagate/cortx/hare/libexec/ha-checks
RUN_DIR=/run/cortx

# XXX Extract this function into some library once it is copied 3 times.
# See https://wiki.c2.com/?ThreeStrikesAndYouRefactor .
log() {
    logger --stderr --tag "${0##*/}" "$@"
}

metadata() {
    cat <<'EOF'
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="ha-check">
  <version>0.1</version>
  <longdesc lang="en">EES HA resource agent.</longdesc>
  <shortdesc lang="en">EES HA resource agent.</shortdesc>
  <parameters>
    <parameter name="check" unique="0" required="1">
      <shortdesc lang="en">Check ID</shortdesc>
      <longdesc lang="en">Check identifier</longdesc>
      <content type="string" />
    </parameter>
  </parameters>
  <actions>
    <action name="start" timeout="20" />
    <action name="stop" timeout="20" />
    <action name="monitor" timeout="20" interval="30" depth="0" />
    <action name="meta-data" timeout="5" />
  </actions>
</resource-agent>
EOF
}

usage() {
    cat <<END
Usage: $0 {start|stop|monitor|meta-data|help}

Expects a fully populated OCF RA-compliant set of environment variables.
END
}

start() {
    if [[ ! -e $RUN_DIR/$OCF_RESKEY_check ]]; then
        mkdir -p $RUN_DIR
        touch $RUN_DIR/$OCF_RESKEY_check
    fi
}

stop() {
    if [[ -e $RUN_DIR/$OCF_RESKEY_check ]]; then
        rm $RUN_DIR/$OCF_RESKEY_check
        rmdir -p $RUN_DIR 2>/dev/null || true
    fi
}

monitor() {
    if [[ ! -e $RUN_DIR/$OCF_RESKEY_check ]]; then
        log "*WARNING* $OCF_RESKEY_check is not running"
        return $OCF_NOT_RUNNING
    fi
    local check=$HA_CHECKS_DIR/$OCF_RESKEY_check
    local rc=0
    $check || rc=$?
    if ((rc != 0)); then
        log "**ERROR** $check exited with code $rc"
        return $OCF_ERR_GENERIC
    fi
}

log "{DEBUG} action='$__OCF_ACTION' check='${OCF_RESKEY_check:-}'"

case $__OCF_ACTION in
    start|stop|monitor)
        if [[ ! -x $HA_CHECKS_DIR/$OCF_RESKEY_check ]]; then
            log "**ERROR** Unsupported check id: $OCF_RESKEY_check"
            exit $OCF_ERR_ARGS
        fi
        $__OCF_ACTION
        ;;
    meta-data)
        metadata
        ;;
    help|usage)
        usage
        ;;
    *)
        log "**ERROR** Unsupported action: $__OCF_ACTION"
        exit $OCF_ERR_UNIMPLEMENTED
        ;;
esac
